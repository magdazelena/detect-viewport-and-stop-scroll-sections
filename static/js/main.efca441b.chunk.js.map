{"version":3,"sources":["components/Container/index.js","utils/colors.js","components/Section/useStyle.jsx","components/Section/index.jsx","App.js","reportWebVitals.js","index.js"],"names":["Container","children","useSnackbar","position","openTopbar","openBottombar","onVisibilityChange","visible","id","className","map","child","key","React","cloneElement","colors","getBackgroundColor","i","colorsIndex","useStyle","styled","section","str","index","length","calculateBackgrounds","Section","props","manual","useState","setVisible","y","setY","ref","useRef","useInView","threshold","inViewRef","inView","setRefs","useCallback","node","current","resumeScroll","container","a","Math","round","scrollTop","promise","Promise","resolve","resolveFn","finished","removeEventListener","scrollListener","clearTimeout","timeoutId","setTimeout","addEventListener","scrollTo","top","behavior","getTopPosition","getBoundingClientRect","document","body","monitorScroll","window","useEffect","scrollToPosition","then","isValidElement","Array","isArray","App","Button","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.efca441b.chunk.js","sourcesContent":["import React from 'react'\r\nimport { useSnackbar } from 'react-simple-snackbar'\r\n\r\nexport default function Container({ children }) {\r\n  const [openTopbar] = useSnackbar({ position: 'top-right' })\r\n  const [openBottombar] = useSnackbar({ position: 'bottom-right' })\r\n\r\n  const onVisibilityChange = (visible, id) => {\r\n    if (visible) openTopbar(`Section ${id} is visible`)\r\n    if (!visible) openBottombar(`Section ${id} is not visible`)\r\n  }\r\n  return <div className=\"container\">\r\n    {children.map((child, key) => {\r\n      return React.cloneElement(child, { key, onVisibilityChange })\r\n    })}\r\n  </div>\r\n}","export const colors = ['#ee6055', '#60d394', '#aaf683', '#ffd97d', '#ff9b85'];\n","import styled from 'styled-components';\r\nimport { colors } from '../../utils/colors';\r\n\r\nfunction getBackgroundColor(i, colorsIndex) {\r\n  return `\r\n        &:nth-child(${i + 1}) {\r\n          background-color: ${colors[colorsIndex + 1]};\r\n         }\r\n      `;\r\n}\r\n\r\nfunction calculateBackgrounds() {\r\n  let str = '';\r\n  let colorsIndex = 0;\r\n  for (let index = 0; index < 10; index += 1) {\r\n    colorsIndex += 1;\r\n    if (colorsIndex === colors.length - 1) colorsIndex = 0;\r\n    str += getBackgroundColor(index, colorsIndex);\r\n  }\r\n  return str;\r\n}\r\n\r\nexport const useStyle = styled.section`\r\n  width: 100vw;\r\n  height: 100vh;\r\n  overflow: hidden;\r\n  ${calculateBackgrounds()};\r\n  color: black;\r\n  font-size: 200px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n","import React, { useEffect, useRef, useState, useCallback } from 'react';\r\nimport { useInView } from 'react-intersection-observer'\r\nimport { useStyle as StyledSection } from './useStyle'\r\n\r\nexport default function Section(props) {\r\n  const {\r\n    children,\r\n    id,\r\n    onVisibilityChange,\r\n    manual\r\n  } = props\r\n  const [visible, setVisible] = useState(false) //previous state\r\n  const [y, setY] = useState(null)\r\n  const ref = useRef()\r\n  const [inViewRef, inView] = useInView({\r\n    threshold: [0.05, 0.9]\r\n  })\r\n\r\n  const setRefs = useCallback(\r\n    (node) => {\r\n      ref.current = node\r\n      inViewRef(node)\r\n    },\r\n    [inViewRef],\r\n  )\r\n\r\n  const stopScroll = (position) => {\r\n    setY(position)\r\n  }\r\n  const resumeScroll = () => {\r\n    setY(null)\r\n  }\r\n\r\n  async function scrollToPosition(container, position) {\r\n    position = Math.round(position);\r\n\r\n    if (container.scrollTop === position) {\r\n      return;\r\n    }\r\n\r\n    let resolveFn;\r\n    let scrollListener;\r\n    let timeoutId;\r\n\r\n    const promise = new Promise(resolve => {\r\n      resolveFn = resolve;\r\n    });\r\n\r\n    const finished = () => {\r\n      container.removeEventListener('scroll', scrollListener);\r\n      resolveFn();\r\n    };\r\n\r\n    scrollListener = () => {\r\n      clearTimeout(timeoutId);\r\n      if (container.scrollTop === position) {\r\n        finished();\r\n      } else {\r\n        timeoutId = setTimeout(finished, 100);\r\n      }\r\n    };\r\n\r\n    container.addEventListener('scroll', scrollListener);\r\n\r\n    container.scrollTo({\r\n      top: position,\r\n      behavior: 'smooth',\r\n    });\r\n\r\n    return promise;\r\n  }\r\n  const getTopPosition = () => {\r\n    const node = ref.current\r\n    if (!node) return null\r\n    return node.getBoundingClientRect().top - document.body.getBoundingClientRect().top\r\n  }\r\n  const monitorScroll = () => {\r\n    if (y === null) return\r\n    window.scrollTo(0, y)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!manual) return\r\n    window.addEventListener('scroll', monitorScroll, false)\r\n    return () => {\r\n      window.removeEventListener('scroll', monitorScroll, false)\r\n    }\r\n  }, [y])\r\n\r\n  useEffect(() => {\r\n    if (inView !== visible) {\r\n      setVisible(inView)\r\n      onVisibilityChange(inView, id)\r\n      if (!inView || !manual) return\r\n      if (getTopPosition()) {\r\n        scrollToPosition(window, getTopPosition()).then(() => stopScroll(getTopPosition()))\r\n      }\r\n    }\r\n  }, [inView])\r\n\r\n  const renderChildren = () => {\r\n    if (!React.isValidElement(children)) return <></>\r\n    return Array.isArray(children)\r\n      ? children.map((child, key) => (React.cloneElement(child, { key, resumeScroll })))\r\n      : React.cloneElement(children, { resumeScroll })\r\n  }\r\n  return (\r\n    <StyledSection ref={setRefs}>\r\n      { !children\r\n        ? <></>\r\n        : renderChildren()\r\n      }\r\n    </StyledSection>\r\n  );\r\n}\r\n","import React from 'react'\nimport SnackbarProvider from 'react-simple-snackbar'\nimport Container from './components/Container';\nimport Section from './components/Section';\n\nfunction App() {\n  return (\n    <SnackbarProvider>\n      <Container>\n        <Section id=\"1\">\n          <p>1</p>\n        </Section>\n        <Section id=\"2\">\n          <p>2</p>\n        </Section>\n        <Section id=\"3\" manual>\n          <Button />\n        </Section>\n        <Section id=\"4\">\n          <p>4</p>\n        </Section>\n        <Section id=\"5\">\n          <p>5</p>\n        </Section>\n        <Section id=\"6\">\n          <p>6</p>\n        </Section>\n      </Container>\n    </SnackbarProvider>\n  );\n}\n\nexport default App\n\nconst Button = (props) => (<button onClick={props.resumeScroll}>Click to resume scrolling</button>)","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}